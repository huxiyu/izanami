/*
 * skiplist.c
 *
 *  Created on: 2018年8月26日
 *      Author: caojx
 */

#include "common.h"
#include "config.h"
#include "dictionary.h"
#include "iniparser.h"
#include "mempool.h"
#include "skiplist.h"

#include <stdlib.h>

static int initialized = FALSE;
static int maxskip = 0;
static int maxlayer = 0;

void setsteaminode(struct steaminode *inode) {

	inode->element = NULL;
	inode->down = inode->upper = inode->post = inode->pre = NULL;
}

struct skiplist *initskiplist(elementcmp cmp) {

	if (!initialized) {

		dictionary *dict = getdict();
		maxskip = iniparser_getint(dict, IZANAMI_SKIPLIST_MAXSKIP, 64);
		maxlayer = iniparser_getint(dict, IZANAMI_SKIPLIST_MAXLAYER, 8);
		initialized = TRUE;
	}

	struct skiplist *list = (struct skiplist *) malloc(sizeof(struct skiplist));
	list->count = 0;
	list->layer = 1;
	list->repeatable = FALSE;
	list->cmp = cmp;
	list->consumer = initmemconsumer();
	list->routenode = imalloc(list->consumer, sizeof(struct steaminode));
	setsteaminode(list->routenode);
	return list;
}

void setrepeatable(struct skiplist *list) {

	list->repeatable = TRUE;
}

struct leafinode *deletefromskiplist(struct skiplist *list, void *element) {

	return NULL;
}

int findfromsubskiplist(struct skiplist *list, struct steaminode *start,
		void *element, struct leafinode **result) {

	int step = 0;
	struct leafinode *tmp = (struct leafinode *)start;
	struct leafinode *pre = tmp;
	while (tmp != NULL && list->cmp(tmp->element, element) < 0) {
		step++;
		tmp = tmp->post;
		pre = tmp->pre;
	}

	if (tmp == NULL) {
		*result = pre;
	} else if (list->cmp(tmp->element, element) == 0) {
		*result = tmp;
	} else {
		*result = tmp->pre;
	}

	return step;
}

struct leafinode *findfromskiplist(struct skiplist *list, void *element) {

	int level = 0;
	struct steaminode *start = list->routenode;
	struct steaminode *tmp = NULL;
	for (; level < list->layer; level++) {
		findfromsubskiplist(list, start, element, (struct leafinode **)&tmp);
		start = tmp->down;
	}

	return (struct leafinode *)tmp;
}

int insertintosubskiplist(struct skiplist *list, struct steaminode *start,
		void *element, struct leafinode **result, int level) {

	int step = findfromsubskiplist(list, start, element, result);
	if (level == list->layer) {

		int ret = list->cmp(result->element, element);
		if (ret != 0 || list->repeatable) {
			struct leafinode *pre = *result;
			struct leafinode *inode = imalloc(list->consumer,
					sizeof(struct leafinode));
			inode->pre = pre;
			inode->post = pre->post;
			inode->element = element;
		}
	} else {
		struct steaminode *inode = (struct steaminode *)*result;
		struct steaminode *tmp = NULL;
		int ret = insertintosubskiplist(list, inode->down, element, (struct leafinode **)&tmp,
				level + 1);

		if (ret > maxskip) {

			struct steaminode *newinode = imalloc(list->consumer,
					sizeof(struct steaminode));
			newinode->post = inode->post;
			newinode->pre = inode;
			newinode->element = element;

			int cmpret = list->cmp(tmp->element, element);

			if (cmpret == 0) {
				newinode->down = tmp;
			} else {
				newinode->down = tmp->post;
			}
		}
	}

	return step;
}

struct leafinode *insertintoskiplist(struct skiplist *list, void *element) {

	return NULL;
}

