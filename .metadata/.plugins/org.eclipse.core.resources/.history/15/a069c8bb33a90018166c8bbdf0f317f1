/*
 * mempool.c
 *
 *  Created on: 2018年8月26日
 *      Author: caojx
 */

#include "config.h"
#include "common.h"
#include "mempool.h"
#include "skiplist.h"
#include "workercommon.h"

#include <stdlib.h>

static struct mempool *pool = NULL;

int blockinfocmp(void *arg1, void *arg2) {

	struct blockinfo *info1 = (struct blockinfo *)arg1;
	struct blockinfo *info2 = (struct blockinfo *)arg2;
	return info1->ptr - info2->ptr;
}

struct mempool *getmempool() {

	if (pool == NULL) {
	dictionary *dict = getdict();
	long poolsize = iniparser_getlongint(dict, IZANAMI_MEMPOOL_MAXSIZE, 1204 * 1024 * 1024);
	int blocksize = iniparser_getint(dict, IZANAMI_MEMPOOL_BLOCKSIZE, 1024 * 1024);

	pool = malloc(sizeof(struct mempool));
	pool->start = malloc(sizeof(poolsize));
	pool->freelist = initskiplist(blockinfocmp);
	pool->usedlist = initskiplist(blockinfocmp);

	int count = poolsize/ blocksize;
	int i = 0;
	for (; i <count; i++) {
		insertintoskiplist(pool->freelist, pool->start + i * blocksize);
	}

	}

	return pool;
}

struct leafinode *getfirst(struct skiplist *list) {

	struct leafinode *inode = NULL;

	struct steaminode *head = list->routenode;
	while (head->down != NULL) {
		head = head->down;
	}

	inode = (struct leafinode *) head->post;

	return inode;
}

void insertinodeintoskiplist(struct skiplist *list, struct leafinode *inode) {

	struct leafinode *prenode = findfromskiplist(list, inode->element);
	inode->post = prenode->post;
	inode->pre = prenode;
	prenode->post->pre = inode;
	prenode->post = inode;
}

struct blockinfo *imalloc(struct mempool *pool) {

	struct leafinode *inode = getfirst(pool->freelist);
	deletefromskiplist(pool->freelist, inode->element);
	insertinodeintoskiplist(pool->usedlist, inode);
	return (struct blockinfo *)inode->element;
}

void returnblock(struct mempool *pool, struct blockinfo *info) {

	struct leafinode *inode = deletefromskiplist(pool->usedlist, info);
	insertinodeintoskiplist(pool->freelist, inode);
}
